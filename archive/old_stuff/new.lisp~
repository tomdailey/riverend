(defun sq (x) (* x x))

(defun mag (&rest lst)
  (sqrt (apply #'+ (mapcar #'sq lst))))

(defun vmag (v)
  (sqrt (apply #'+ (mapcar #'sq v))))

(defun unitize (v)
  (let ((m (vmag v)))
    (mapcar #'(lambda (x) (/ x m)) v)))

(defun vdif (v1 v2)
  (mapcar #'- v1 v2))

(defun vdot (v1 v2)
  (apply #'+ (mapcar #'* v1 v2)))

(defun v+ (v1 v2) ; how to give this a rest param?
  (mapcar #'+ v1 v2))

(defun vs* (s v)
  (mapcar #'* v (list-copies s (length v))))

(defun vcross (v1 v2)
  (list
   (- (* (nth 2 v1) (nth 1 v2)) (* (nth 1 v1) (nth 2 v2)))
   (- (* (nth 0 v1) (nth 2 v2)) (* (nth 2 v1) (nth 0 v2)))
   (- (* (nth 0 v1) (nth 1 v2)) (* (nth 1 v1) (nth 0 v2)))))

(defun random-vector (magn)
  (random-elt (list
	       (list magn 0 0)
	       (list 0 magn 0)
	       (list 0 0 magn))))

(defun random-elt (choices)
  "Choose an element from a list at random."
  (elt choices (random (length choices))))

(defun list-copies (thing n)
  (if (= n 0)
      nil
      (cons thing (list-copies thing (- n 1)))))

(defun average (&rest lst)
  (/ (apply #'+ lst) (length lst)))

(defun pointwise-op (fn &rest list)
  (make-point
   :x (apply fn (mapcar #'x list))
   :y (apply fn (mapcar #'y list))
   :z (apply fn (mapcar #'z list))))

(defun vop (fn &rest list)
  (make-point
   :x (apply fn (mapcar #'x list))
   :y (apply fn (mapcar #'y list))
   :z (apply fn (mapcar #'z list))))
(defun listify (pt)
  (list (x pt) (y pt) (z pt)))

(defun unit-vector (x y z)
  (let ((d (mag x y z)))
    (values (/ x d) (/ y d) (/ z d))))

(defun pdistance (p1 p2)
  (mag (- (x p1) (x p2))
       (- (y p1) (y p2))
       (- (z p1) (z p2))))
(defun vdistance (v1 v2)
  (vmag (vdif v1 v2)))

(defun minroot (a b c)
  (if (zerop a)
      (/(- c) b)
      (let ((disc (- (sq b) (* 4 a c))))
	(unless (minusp disc)
	  (let ((discrt (sqrt disc)))
	    (min (/ (+ (- b) discrt) (* 2 a))
		 (/ (- (- b) discrt) (* 2 a))))))))

(defun mand (a &rest ls)
  (if ls
      (and a (apply #'mand ls))
      a))

(defparameter *world* nil)
(defvar eye '(0 0 -700))

(defparameter *red* '(255 0 0))
(defparameter *blue* '(0 0 255))
(defparameter *green* '(0 255 0))
(defparameter *white* '(0 0 0))
(defparameter *black* '(255 255 255))
(defvar colors nil)
(setf colors (list *red* *blue* *green* *white*))

(defvar light1)
(setq light1 '(1 0 0))

(defvar env-light)
(setf env-light 0.3)

;; Untested loading of files. Shpest.lisp isn't around yet
;; Put it in the repl with this file, and (make-frame) should work
;; I haven't tested the new file-distribution from a fresh emacs
;; But the points -> 3-lists project is over.
(load "/home/tom/Documents/lisp_programs/riverend/utils.lisp")
(load "/home/tom/Documents/lisp_programs/riverend/normals.lisp")
(load "/home/tom/Documents/lisp_programs/riverend/intersect.lisp")


;; This writes to the file. It literally just determines the color of the points on the
;; camera-plane
(defun tracer (pathname &optional (res 1)) ;; ideal resolution: 10
  (with-open-file (p pathname :direction :output)
    (format p "P3 ~A ~A 255~%" (* res 128) (* res 72))
    (let ((inc (/ res)))
      (do ((y -36 (+ y inc)))
	  ((< (- 36 y) inc))
	(do ((x -64 (+ x inc)))
	    ((< (- 64 x) inc))
	  (destructuring-bind (red green blue)
	      (color-at x y)
	    (format p "~%~3d ~3d ~3d   " red green blue)))))))

(defun color-at (x y) ;; returns the color at the point on the camera plane.
  (let ((ray-direction (unitize (vdif (list x y 0) eye))))
    (sendray eye ray-direction)))

(defun sendray (pt direc)
  (multiple-value-bind (hsurface int-pnt) (first-hit pt direc)
    (if hsurface
	(let ((hsurface-color (surface-base-color hsurface))
	      (brightness (+ env-light
			     (* (- 1 env-light)
				(average (lambert hsurface int-pnt light1)
					 (lambert hsurface int-pnt (vs* 0.15 direc)))))))
	  (mapcar #'(lambda (x) (round (* brightness x))) hsurface-color))
	'(0 0 0))))

(defun first-hit (pt direc)
  (let (surface hit dist)
    (dolist (surf *world*)
      (let ((h (intersect surf pt direc)))
	(when h
	  (let ((d (vdistance h pt)))
	    (when (or (null dist) (< d dist))
	      (setf surface surf
		    hit h
		    dist d))))))
    (values surface hit)))

(defun lambert (s int light) ; Note that light should be a unit vector
  (let ((norm (normal s int)))
    (max 0 (vdot norm light))))

;; Types of shapes
(defstruct surface
  base-color)

(defstruct (sphere (:include surface))
  radius center)

(defun defsphere (center r col)
  (let ((s (make-sphere
	    :radius r
	    :center center
	    :base-color col)))
    (push s *world*)
    s))

(defstruct (plane (:include surface))
  coef)
(defun defplane (x y z color)
  (let ((s (make-plane
	    :base-color color
	    :coef (list x y z))))
    (push s *world*)
    s))

(defstruct (particle (:include surface))
  pt)
(defun defparticle (x y z c)
  (push (make-particle :pt (make-point :x x :y y :z z)
		       :base-color c)
	*world*))

(defstruct (shmangle (:include surface))
  v1 v2 v3) 
(defun defshmangle (v1 v2 v3 c) ; give it color and three vertices (as 3-lists)
  (push (make-shmangle :v1 v1
		       :v2 v2
		       :v3 v3
		       :base-color c)
	*world*))
;; Computing INTERSECTION
(defun intersect (s pt direc)
  (funcall (typecase s
	     (sphere #'sphere-intersect)
	     (plane #'plane-intersect)
	     (shmangle #'shmangle-intersect)
	     (particle #'particle-intersect))
	   s pt direc))

(defun sphere-intersect (s pt direc)
  (let* ((c (sphere-center s))
	 (n (minroot (vdot direc direc)
		     (* 2 (vdot (vdif pt c) direc))
		     (- (vdot (vdif pt c) (vdif pt c))
			(sq (sphere-radius s))))))
    (if n
	(v+ pt (vs* n direc)))))

(defun poly-intersect (surf ray)
  (dolist (s (poly-otriangles surf)) ; tigle is an oriented triangle a.k.a otriangle
    (let* ((pln (make-plane (otriangle-points)))
	   (pt (plane-intersect pln ray)))
      (multiple-value-bind (u v) (param-tri pt s)
	  (if (and (> 0 v) (> 0 u) (< 1 (+ v u)))
	      (values s pt))))))

(defun param-tri (pt v1 v2 v3)
  (let* ((vhat (vdif v2 v1))
	 (uhat (vdif v3 v1))
	 (norm (vcross uhat vhat))
	 (trans-pt (vdif pt v1))
	 (vperp (vcross vhat norm))
	 (uperp (vcross uhat norm))
	 (denom (vdot vperp uperp)))
    (values (/ (vdot trans-pt vperp) denom)
	    (/ (vdot trans-pt uperp) denom))))

(defun shmangle-intersect (s pt direc)
  (let ((p1 (shmangle-v1 s))
	(p2 (shmangle-v2 s))
	(p3 (shmangle-v3 s)))
    (let ((int (intersect-plane (specify-plane p1 p2 p3) pt direc)))
      (if int
	  (multiple-value-bind (u v) (param-tri int p1 p2 p3)
	    (if (and (> 0 u) (> 0 v) (< 1 (+ u v)))
		int))))))

(defun intersect-plane )
		
    

(defun particle-intersect (s pt xr yr zr)
  (let ((parm nil))
    (if (apply #'mand (list
		  (if (= xr 0)
		      (= (x (particle-pt s)) (x pt))
		      (setf parm (/ (- (x (particle-pt s)) (x pt)) xr)))
		  (if (= yr 0)
		      (= (y (particle-pt s)) (y pt))
		      (if parm
			  (= parm (/ (- (y (particle-pt s)) (y pt)) yr))
			  (setf parm (/ (- (y (particle-pt s)) (y pt)) yr))))
		  (if (= zr 0)
		      (= (z (particle-pt s)) (z pt))
    		      (if parm
			  (= parm (/ (- (z (particle-pt s)) (z pt)) zr))
			  (setf parm (/ (- (z (particle-pt s)) (z pt)) zr))))))
	(progn
	  (format t "something happened with ~A~%" (z (particle-pt s)))
	  (particle-pt s)))))

(defun plane-intersect (s pt xr yr zr)
  (let* ((uhat (make-point :x xr :y yr :z zr))
	 (coef (plane-coef s))
	 (term (apply #'+ (listify (vop #'* uhat coef))))
	 (par nil))
    (unless (= term 0)
      (setf par (- (/ (apply #'+ (listify (vop #'* pt coef))) term)))
      (vop #'+ pt (scale uhat par)))))
;; Computing NORMALS
(defun normal (s pt)
  (funcall (typecase s
	     (sphere #'sphere-normal)
	     (plane #'plane-normal)
	     (particle #'particle-normal))
	   s pt))

(defun sphere-normal (s pt)
  (let ((c (sphere-center s)))
    (unitize (vdif pt c))))

(defun plane-normal (s pt)
  (let ((c (plane-coef s)))
    (unit-vector (x c)
		 (y c)
		 (z c))))
(defun particle-normal (s pt)
  (unit-vector (x eye)
	       (y eye)
	       (z eye)))
