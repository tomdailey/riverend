(in-package :riverend)

;; MATH
(defun sq (x) (* x x))
(defun average (&rest lst)
  "Average together all the arguments"
  (/ (apply #'+ lst) (length lst)))
(defun minroot (a b c)
  "Return the smallest root for a quadratic given by a b c"
  (if (zerop a)
      (/ (- c) b)
      (let ((disc (- (sq b) (* 4 a c))))
	(unless (minusp disc)
	  (let ((discrt (sqrt disc)))
	    (min (/ (+ (- b) discrt) (* 2 a))
		 (/ (- (- b) discrt) (* 2 a))))))))

;; MISC
(defun list-copies (thing n)
  "Cons together thing n times"
  (if (= n 0)
      nil
      (cons thing (list-copies thing (- n 1)))))
(defun mand (lst)
  (not (member nil lst)))
(defun mappend (fn &rest lsts)
  "maps elements in list and finally appends all resulted lists"
  (apply #'append (mapcar fn lsts)))

;; MACROS
(defmacro in (obj &rest choices)
  "Tests if obj is in choices. From Graham"
  ;; Note this is possible with a function if choices is already in a list
  (let ((insym (gensym)))
    `(let ((,insym ,obj)) ;; only evaluate obj once
       (or ,@(mapcar #'(lambda (c) `(eql ,insym ,c))
		     choices)))))
(defmacro while (control &body body)
  "Evaluate body while control is true"
  `(do ()
       ((not ,control))
     ,@body))
(defmacro nif (expr pos zero neg)
  "Deal with three situations for expr; positive, zero, negative"
    (let ((g (gensym)))
      `(let ((,g ,expr))
	 (cond ((plusp ,g) ,pos)
	       ((zerop ,g) ,zero)
	       (t ,neg)))))
(defmacro aif (test then &optional else)
  "Evaluate test, bind it to ~it~ then evaluate if and else"
  `(let ((it ,test))
     (if it ,then ,else)))

(defmacro with-gensyms (syms &body body)
  `(let ,(mapcar #'(lambda (s)
		     `(,s (gensym)))
		 syms)
     ,@body))

;; VECTOR OPERATIONS
(defun vdif (v1 v2)
  "Return v1 minus v2"
  (mapcar #'- v1 v2))
(defun vdot (v1 v2)
  "Return the dot product of v1 and v2"
  (apply #'+ (mapcar #'* v1 v2)))
(defmacro v+ (&rest list-of-args)
  "Multiply an arbitrary number of vectors"
  `(mapcar #'+ ,@list-of-args))
(defun vplus (v1 v2)
  "Add v1 to v2"
  (mapcar #'+ v1 v2))
(defun vs* (s v)
  "Scalar multiply v by s"
  (mapcar #'* v (list-copies s (length v))))
(defun vcross (x y)
  "Calculate the 3d vector cross product"
  (list
   (- (* (nth 1 x) (nth 2 y)) (* (nth 2 x) (nth 1 y)))
   (- (- (* (nth 0 x) (nth 2 y)) (* (nth 2 x) (nth 0 y))))
   (- (* (nth 0 x) (nth 1 y)) (* (nth 1 x) (nth 0 y)))))
(defun mag (vec)
  "Return the magnitude of vec"
  (sqrt (vdot vec vec)))
(defun vdist (v1 v2)
  "Calculate standard euclidian distance from v1 to v2"
  (mag (vdif v1 v2)))
(defun unitize (v)
  "Return a unit vector colinear with v"
  (let ((thing (mag v)))
    (if (= thing 0)
	'(1 0 0)
	(vs* (/ 1 (mag v)) v))))

;; RANDOM OPERATIONS
(defun random-elt (choices)
  "Choose an element from a list at random."
  (elt choices (random (length choices))))
(defun rand-range (low high)
  "Return a random number between low and high"
  (let ((dif (- high low)))
    (+ (random dif) low)))
(defun rand-pt ()
  "Return a list of 3 random coords"
  (list (rand-range -60 60)
	(rand-range -25 25)
	(rand-range -10 10)))
(defun rand-color ()
  "Return a random color from *color-palette*"
  (random-elt *color-palette*))

